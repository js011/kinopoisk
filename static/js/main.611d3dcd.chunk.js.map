{"version":3,"sources":["components/Header/Header.js","components/Filters/SortBy.js","components/Filters/Filters.js","components/Movies/MovieItem.js","utils/apies.js","components/Movies/MoviesList.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","style","visibility","SortBy","this","sort_by","onChangeFilters","sortByOptions","htmlFor","name","id","value","onChange","map","option","key","label","React","PureComponent","defaultProps","Filters","filters","page","onChangePage","type","onClick","bind","disabled","Component","MovieItem","movie","src","poster_path","alt","title","MoviesList","getMovies","link","fetch","then","response","json","data","setState","movies","results","state","p","App","e","target","s","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.611d3dcd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className=\"container pt-3 pb-3\">\r\n      <div className=\"title col-2\">\r\n        <p className=\"title__name\" style={{ visibility: 'hidden' }}>\r\n          Kino<span className=\"title__name-prefix\">poisk</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"search col-10\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class SortBy extends React.PureComponent {\r\n  static propTypes = {\r\n    sort_by: PropTypes.string.isRequired,\r\n    onChangeFilters: PropTypes.func.isRequired,\r\n  }\r\n\r\n  static defaultProps = {\r\n    sortByOptions: [\r\n      {\r\n        label: 'Популярные (убывание)',\r\n        value: 'popularity.desc',\r\n      },\r\n      {\r\n        label: 'Популярные (возростание)',\r\n        value: 'popularity.asc',\r\n      },\r\n      {\r\n        label: 'Рейтинг (убывание)',\r\n        value: 'vote_average.desc',\r\n      },\r\n      {\r\n        label: 'Рейтинг (возростание)',\r\n        value: 'vote_average.asc',\r\n      },\r\n    ],\r\n  }\r\n\r\n  render() {\r\n    const { sort_by, onChangeFilters, sortByOptions } = this.props\r\n\r\n    return (\r\n      <div className=\"sort form-group\">\r\n        <label className=\"filters-name\" htmlFor=\"sort_by\">\r\n          Сортировать\r\n        </label>\r\n        <select\r\n          className=\"form-control\"\r\n          name=\"sort_by\"\r\n          id=\"sort_by\"\r\n          value={sort_by}\r\n          onChange={onChangeFilters}\r\n        >\r\n          {sortByOptions.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport SortBy from './SortBy'\r\n\r\nclass Filters extends React.Component {\r\n  render() {\r\n    const {\r\n      filters: { sort_by },\r\n      onChangeFilters,\r\n      page,\r\n      onChangePage,\r\n    } = this.props\r\n\r\n    return (\r\n      <>\r\n        <form className=\"mb-3\">\r\n          <SortBy sort_by={sort_by} onChangeFilters={onChangeFilters} />\r\n          <div className=\"form-group\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-light\"\r\n              onClick={onChangePage.bind(null, page - 1)}\r\n              disabled={page === 1}\r\n            >\r\n              Назад\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-light\"\r\n              onClick={onChangePage.bind(null, page + 1)}\r\n            >\r\n              Вперед\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Filters\r\n","import React from 'react'\r\nimport { api_img_url } from '../../utils/apies'\r\n\r\nconst MovieItem = (props) => {\r\n  const { movie } = props\r\n\r\n  return (\r\n    <div className=\"movie-card\">\r\n      <img\r\n        className=\"movie-card__img\"\r\n        src={\r\n          movie.poster_path !== null\r\n            ? `${api_img_url}${movie.poster_path}`\r\n            : `not-foundPoster.png`\r\n        }\r\n        alt={movie.title}\r\n      />\r\n      <div className=\"movie-card__desc\">\r\n        <p className=\"movie-card__desc__title\">{movie.title}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MovieItem\r\n","export const api_url = 'https://api.themoviedb.org/3'\r\n\r\nexport const api_img_url = 'https://image.tmdb.org/t/p/w500'\r\n\r\nexport const api_key_movieDB_v3 = '2bf9f43ff01f800a4b2838b95fcce99e'\r\n\r\nexport const api_key_movieDB_v4 =\r\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyYmY5ZjQzZmYwMWY4MDBhNGIyODM4Yjk1ZmNjZTk5ZSIsInN1YiI6IjVjZTkyOWU3YzNhMzY4MWM0ZTFlODRkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.fffZy6W_ZCD20rApqm9asph-hWYo_w8zjvPNLyZf-wY'\r\n","import React from 'react'\r\nimport { api_url, api_key_movieDB_v3 } from '../../utils/apies'\r\nimport MovieItem from '../Movies/MovieItem'\r\n\r\nclass MoviesList extends React.Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      movies: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { filters, page } = this.props\r\n\r\n    this.getMovies(filters, page)\r\n  }\r\n\r\n  componentDidUpdate(p) {\r\n    const { onChangePage, filters, page } = this.props\r\n\r\n    if (p.filters.sort_by !== filters.sort_by) {\r\n      onChangePage(1)\r\n      this.getMovies(filters, 1)\r\n    }\r\n\r\n    if (p.page !== page) {\r\n      this.getMovies(filters, page)\r\n    }\r\n  }\r\n\r\n  getMovies = (filters, page) => {\r\n    const { sort_by } = filters\r\n\r\n    const link = `${api_url}/discover/movie?api_key=${api_key_movieDB_v3}&language=ru-RU&sort_by=${sort_by}&page=${page}`\r\n    return fetch(link)\r\n      .then((response) => response.json())\r\n      .then((data) => this.setState({ movies: data.results }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.movies.map((movie) => {\r\n          return <MovieItem movie={movie} key={movie.id} />\r\n        })}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MoviesList\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Header from './components/Header/Header'\nimport Filters from './components/Filters/Filters'\nimport MoviesList from './components/Movies/MoviesList'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      filters: {\n        sort_by: 'popularity.desc',\n      },\n      page: 1,\n    }\n  }\n\n  onChangeFilters = (e) => {\n    const { name, value } = e.target\n\n    this.setState((s) => ({\n      filters: {\n        ...s.filters,\n        [name]: value,\n      },\n    }))\n  }\n\n  onChangePage = (page) => {\n    this.setState({\n      page,\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"header\">\n          <Header />\n        </div>\n        <div className=\"main container\">\n          <div className=\"row\">\n            <div className=\"filters col-3\">\n              <Filters\n                onChangeFilters={this.onChangeFilters}\n                filters={this.state.filters}\n                page={this.state.page}\n                onChangePage={this.onChangePage}\n              />\n            </div>\n            <div className=\"movies col-9\">\n              <MoviesList\n                filters={this.state.filters}\n                page={this.state.page}\n                onChangePage={this.onChangePage}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport WebFont from 'webfontloader'\n\nWebFont.load({\n  google: {\n    families: ['Open Sans'],\n  },\n})\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}